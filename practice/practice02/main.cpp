#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <limits>

struct BankAccount
{
    std::string filename;
    double balance;

    BankAccount(const std::string& file) : filename(file)
    {
        readBalanceFromFile();
    }

    void checkBalance() const
    {
        std::cout << "Your current balance is: $" << std::fixed << std::setprecision(2) << balance << std::endl;
    }

    void deposit(double amount)
    {
        if (amount > 0)
        {
            balance += amount;
            writeBalanceToFile();
            std::cout << "Deposit successful. Your new balance is: $" << std::fixed << std::setprecision(2) << balance << std::endl;
        }
        else
        {
            std::cerr << "Error: Deposit amount must be positive." << std::endl;
        }
    }

    void withdraw(double amount)
    {
        if (amount > 0 && amount <= balance)
        {
            balance -= amount;
            writeBalanceToFile();
            std::cout << "Withdrawal successful. Your new balance is: $" << std::fixed << std::setprecision(2) << balance << std::endl;
        }
        else if (amount <= 0)
        {
            std::cerr << "Error: Withdrawal amount must be positive." << std::endl;
        }
        else
        {
            std::cerr << "Error: Insufficient funds. Your balance is $" << std::fixed << std::setprecision(2) << balance << std::endl;
        }
    }

private:
    void readBalanceFromFile()
    {
        std::ifstream inFile(filename);
        if (inFile.is_open())
        {
            inFile >> balance;
            inFile.close();
            std::cout << "Welcome to Your Bank Account!" << std::endl;
            std::cout << "Your current balance is: $" << std::fixed << std::setprecision(2) << balance << std::endl;
        }
        else
        {
            std::cout << "Welcome to Your Bank Account!" << std::endl;
            std::cout << "Initializing account with $100.00…" << std::endl;
            balance = 100.00;
            writeBalanceToFile();
        }
    }

    void writeBalanceToFile()
    {
        std::ofstream outFile(filename);
        if (outFile.is_open())
        {
            outFile << balance;
            outFile.close();
        }
        else
        {
            std::cerr << "Error: Could not open file " << filename << " for writing." << std::endl;
        }
    }
};

int main()
{
    BankAccount account("account_balance.txt");

    int choice;
    while (true)
    {
        std::cout << "\nMenu:\n";
        std::cout << "1. Check Balance\n";
        std::cout << "2. Deposit Money\n";
        std::cout << "3. Withdraw Money\n";
        std::cout << "4. Exit\n";

        std::cout << "Enter your choice: ";
        std::cin >> choice;

        if (std::cin.fail())
        {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Invalid input. Please choose a valid number from the menu." << std::endl;
            continue;
        }

        switch (choice)
        {
        case 1:
            account.checkBalance();
            break;
        case 2:
        {
            double amount;
            std::cout << "Enter deposit amount: ";
            std::cin >> amount;
            if (std::cin.fail())
            {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "Invalid input. Please enter a valid amount.\n";
            }
            else
            {
                account.deposit(amount);
            }
            break;
        }
        case 3:
        {
            double amount;
            std::cout << "Enter withdrawal amount: ";
            std::cin >> amount;
            if (std::cin.fail()) {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "Invalid input. Please enter a valid amount.\n";
            }
            else
            {
                account.withdraw(amount);
            }
            break;
        }
        case 4:
            std::cout << "Exit\n";
            return 0;
        default:
            std::cout << "Invalid choice. Please try again.\n";
            break;
        }
    }
}


//This template was generated by Ai, and then modified by using the text and the tutorial.



